import xml.etree.ElementTree as ET
import base64
import hashlib
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.x509 import load_der_x509_certificate
from cryptography.hazmat.backends import default_backend
 
#ƒê·ªçc file XML h√≥a ƒë∆°n
with open(r"E:\Hwng\Projects\Invoice Tool\test\hoa_don.xml", "r", encoding="utf-8") as f:
    xml_data = f.read()
 
#Namespace ch·ªØ k√Ω s·ªë
ns = {'ds': 'http://www.w3.org/2000/09/xmldsig#'}
root = ET.fromstring(xml_data)
 
#Tr√≠ch xu·∫•t DigestValue
digest_value = root.find('.//ds:Reference[@URI="#fb01448e-259e-4e8e-900c-614537201c0b"]/ds:DigestValue', ns).text
 
#Tr√≠ch xu·∫•t n·ªôi dung DLHDon ƒë·ªÉ hash
dlh_node = root.find('.//DLHDon')
dlh_xml = ET.tostring(dlh_node, encoding='utf-8', method='xml')
 
#T√≠nh to√°n SHA1 hash
calculated_digest = base64.b64encode(hashlib.sha1(dlh_xml).digest()).decode()
digest_valid = (digest_value == calculated_digest)
 
#Tr√≠ch xu·∫•t SignatureValue
signature_value = root.find('.//ds:SignatureValue', ns).text
signature_bytes = base64.b64decode(signature_value)
 
#Tr√≠ch xu·∫•t SignedInfo
signed_info_node = root.find('.//ds:SignedInfo', ns)
signed_info_xml = ET.tostring(signed_info_node, encoding='utf-8', method='xml')
 
#Tr√≠ch xu·∫•t ch·ª©ng th∆∞ s·ªë
cert_b64 = root.find('.//ds:X509Certificate', ns).text
cert_der = base64.b64decode(cert_b64)
certificate = load_der_x509_certificate(cert_der, default_backend())
public_key = certificate.public_key()
 
#X√°c minh ch·ªØ k√Ω
try:
    public_key.verify(
        signature_bytes,
        signed_info_xml,
        padding.PKCS1v15(),
        hashes.SHA1()
    )
    signature_valid = True
except Exception:
    signature_valid = False
 
#In k·∫øt qu·∫£
print("‚úÖ DigestValue:", "H·ª£p l·ªá" if digest_valid else "Kh√¥ng h·ª£p l·ªá")
print("‚úÖ Ch·ªØ k√Ω s·ªë:", "H·ª£p l·ªá" if signature_valid else "Kh√¥ng h·ª£p l·ªá")
print("üîç Th√¥ng tin ch·ª©ng th∆∞ s·ªë:")
print(" - Ch·ªß th·ªÉ:", certificate.subject.rfc4514_string())
print(" - Nh√† ph√°t h√†nh:", certificate.issuer.rfc4514_string())
print(" - Hi·ªáu l·ª±c t·ª´:", certificate.not_valid_before)
 
#N·∫øu DigestValue kh·ªõp ‚Üí h√≥a ƒë∆°n ch∆∞a b·ªã ch·ªânh s·ª≠a.
#N·∫øu kh√¥ng kh·ªõp ‚Üí h√≥a ƒë∆°n ƒë√£ b·ªã ch·ªânh s·ª≠a sau khi k√Ω.
